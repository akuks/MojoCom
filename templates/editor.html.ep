<script src="https://cdn.jsdelivr.net/npm/@editorjs/header@latest"></script><!-- Header -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/simple-image@latest"></script><!-- Image -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/delimiter@latest"></script><!-- Delimiter -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/list@latest"></script><!-- List -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/checklist@latest"></script><!-- Checklist -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/quote@latest"></script><!-- Quote -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/code@latest"></script><!-- Code -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/embed@latest"></script><!-- Embed -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/table@latest"></script><!-- Table -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/link@latest"></script><!-- Link -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/warning@latest"></script><!-- Warning -->

<script src="https://cdn.jsdelivr.net/npm/@editorjs/marker@latest"></script><!-- Marker -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/inline-code@latest"></script><!-- Inline Code -->
<script src="https://cdn.jsdelivr.net/npm/editorjs-text-alignment-blocktune@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/image@2.3.0"></script> <!-- Upload Image -->

<!-- Load Editor.js's Core -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script>

<script>
    var editor = new EditorJS({
        /**
         * Enable/Disable the read only mode
         */
        readOnly: false,

        /**
         * Wrapper of Editor
         */
        holder: 'editorjs',

        // Set Autofocus true
        autofocus: true,

        /**
         * Tools list
         */
        tools: {
            // Set Headers
            header: {
                class: Header,
                inlineToolbar: ['link', 'marker', 'bold', 'italic'],
                config: {
                    placeholder: 'Title of the Article'
                },
                shortcut: 'CMD+SHIFT+H'
            },

            anyTuneName: {
                class: AlignmentBlockTune,
                config: {
                    placeholder: 'Alignment',
                    default: "left",
                    blocks: {
                        header: 'center',
                        list: 'right'
                    }
                },
            },

            /**
             * Or pass class directly without any configuration
             */
             image: {
                class: ImageTool,
                config: {
                    endpoints: {
                        byFile: 'http://localhost.0x484c.com:3000/upload/image'
                    }
                }
             },

            list: {
                class: List,
                inlineToolbar: true,
                shortcut: 'CMD+SHIFT+L'
            },

            checklist: {
                class: Checklist,
                inlineToolbar: true,
            },

            quote: {
                class: Quote,
                inlineToolbar: true,
                config: {
                    quotePlaceholder: 'Enter a quote',
                    captionPlaceholder: 'Quote\'s author',
                },
                shortcut: 'CMD+SHIFT+O'
            },

            marker: {
                class: Marker,
                shortcut: 'CMD+SHIFT+M'
            },

            code: {
                class: CodeTool,
                shortcut: 'CMD+SHIFT+C'
            },

            inlineCode: {
                class: InlineCode,
                shortcut: 'CMD+SHIFT+C'
            },

            linkTool: LinkTool,

            embed: Embed,

            table: {
                class: Table,
                inlineToolbar: true,
                shortcut: 'CMD+ALT+T'
            },

        },

        /**
         * This Tool will be used as default
         */
        // defaultBlock: 'paragraph',

        /**
         * Initial Editor data
         */
        data: {
            blocks: [
                {
                    type: "header",
                    data: {
                        text: "Post Title...",
                        level: 2
                    }
                }
            ]
        },
        //   onReady: function(){
        //     saveButton.click();
        //   },
        //   onChange: function(api, event) {
        //     console.log('something changed', event);
        //   }
    });

    /**
     * Saving button
     */
    //const saveButton = document.getElementById('saveButton');

    /**
     * Toggle read-only button
     */
    // const toggleReadOnlyButton = document.getElementById('toggleReadOnlyButton');
    // const readOnlyIndicator = document.getElementById('readonly-state');

    /**
     * Saving example
     */
    // saveButton.addEventListener('click', function () {
    //   editor.save()
    //     .then((savedData) => {
    //       cPreview.show(savedData, document.getElementById("output"));
    //     })
    //     .catch((error) => {
    //       console.error('Saving error', error);
    //     });
    // });

    /**
     * Toggle read-only example
     */
    // toggleReadOnlyButton.addEventListener('click', async () => {
    //   const readOnlyState = await editor.readOnly.toggle();

    //   readOnlyIndicator.textContent = readOnlyState ? 'On' : 'Off';
    // });
</script>

<style type="text/css">
    .ce-block__content,
    .ce-toolbar__content {
        max-width: calc(60% - 80px) !important;
    }

    .cdx-block {
        text-align: left !important;
    }
</style>