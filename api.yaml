openapi: 3.0.3
info:
  title: MojoCom - A Community builder in Perl
  description: 'This is a community builder in Perl'
  termsOfService: http://localhost:5000/terms/
  contact:
    email: kukreti.ashutosh@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1/
paths:
  /user/login:
    post:
      description: Login API
      summary: MojoCom Login API
      operationId: userLogin
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: true
          schema:
            type: string
      x-mojo-to: 'Auth::Login#login'
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        400:
          description: Incorrect username or password
          content: {}
        200:
          description: Login success or failure
          content:
            application/json:
              schema:
                type: object
        404:
          description: User not found
          content: {}
  /user:
    post:
      description: Register API
      summary: MojoCom Register API
      operationId: userRegister
      x-mojo-to: 'Auth::Register#register'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                confirm_password:
                  type: string
              required:
                - username
                - password
                - confirm_password
      responses:
        200:
          description: Login success or failure
          content:
            application/json:
              schema:
                type: object
  /profile:
    get:
      description: User profile for logged in user
      summary: User profile for logged in user
      operationId: userProfile
      x-mojo-to: 'Auth::Login#profile'
      parameters:
        - in: header
          name: token
          schema:
            type: string
      responses:
        200:
          description: Get user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        400:
          description: Bad Request
        401:
          description: Not authorised
      security:
        - bearerAuth: []
  /profile/update:
    post:
      description: Update user profile for logged in user
      summary: Update user profile
      operationId: updateUserProfile
      x-mojo-to: 'Auth::Profile#update'
      parameters:
        - in: header
          name: token
          schema:
            type: string
        - in: header
          name: user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                middle_name:
                  type: string
                last_name:
                  type: string
                url_linkedin:
                  type: string
                url_github:
                  type: string
                url_blog:
                  type: string
              required:
                - first_name
                - last_name
      responses:
        200:
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        400:
          description: Bad Request
        401:
          description: Not authorized
      security:
        - bearerAuth: [ ]
  /article:
    post:
      description: Create article for logged in user
      summary: Create article for logged in user
      operationId: createArticle
      x-mojo-to: 'Article#create'
      parameters:
        - in: header
          name: token
          schema:
            type: string
        - in: header
          name: user
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title: 
                  type: string
                  description: Title of the article
                body:
                  type: string
                  description: Body of the article
                image:
                  type: string
                  description: Cover Image of the article
                  format: binary
                slug:
                  type: string
                  description: Slug of the article url
                episode: 
                  type: integer
                  description: Episode related to the article
                category:
                  type: array
                  description: Category of the Article
                status:
                  type: string
                  description: Status of the Article
              required:
                - body 
                - title
                - category
      responses:
        200:
          description: Article Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Bad Request
        401:
          description: Not authorized
        405:
          description: Invalid input
          content: {}
      security:
        - bearerAuth: [ ]
  /article/{slug}:
    get:
      description: Show article
      summary: Show article for any user
      operationId: showArticle
      x-mojo-to: 'Article#show'
      parameters:
        - in: path
          required: true
          name: slug
          schema:
            type: string
      responses:
        200:
          description: Article Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Bad Request
        401:
          description: Not authorized
        405:
          description: Invalid input
          content: {}
components:
  schemas:
    User:
      type: object
    UserProfile:
      type: object
      properties:
        id:
          type: integer
        article:
          type: integer
    Article:
      type: object
      properties:
        id: 
          type: integer
        role:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT Authorization
      scheme: bearer
      bearerFormat: JWT

